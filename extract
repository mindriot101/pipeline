#!/usr/bin/env python

import sys
import optparse
import os
from subprocess import PIPE, Popen, STDOUT
#from IPython.Shell import IPShellEmbed


class OptionParser(optparse.OptionParser):
    """Customised OptionParser class with 
    extra feature 'check_required'"""
    def check_required(self, opt):
        """Throws error if opt is not included"""
        option = self.get_option(opt)

        if getattr(self.values, option.dest) is None:
            self.error("%s option not supplied" % option)

def main(parses):

    #ipshell = IPShellEmbed()
    """Main function"""
    options, args = parses

    scale_low = 5.1
    scale_high = 5.3
    dir = args[0]

    outputdir = options.outputdir


    dir = dir.rstrip('/')
    outputdir = outputdir.rstrip('/')

    
    p = Popen('ls %s/*.fits' % (dir,), stdout=PIPE, shell=True, stderr=PIPE)
                
    result, error = p.communicate()

    if len(error) != 0:
        print error,
        sys.exit(1)

    files = []

    for file in result.split():
        files.append(file.lstrip("%s/" % (dir,)))


    for file in files:
        cmd = 'solve-field --scale-units arcsecperpix --scale-low %f --scale-high %f %s/%s --no-plots --overwrite --dir %s' % (scale_low, scale_high, dir, file, outputdir)
        print "Running command\n%s\n" % (cmd,) 
        p = Popen(cmd, shell=True) # run astrometry solving program

        p.communicate() #run the command

        stub = file.rstrip('.fits')

        rmcmd = 'rm -f %s/%s{.axy,.corr,-indx.xyls,.match,.rdls,.solved,.wcs}' % (outputdir, stub)
        print "Running command\n%s\n" % (rmcmd,) 
        p = Popen(rmcmd, shell=True)
        #p.communicate()

        #if len(error) != 0:
        #    print error,
        #    sys.exit(1)

        #sextractor command
        cmd = 'sex -catalog_name sources/%s -filter N -detect_minarea 10 -detect_thresh 7 -analysis_thresh 7 -pixel_scale 5.28 %s/%s' % (file.rstrip('.fits') + '.cat', outputdir, file.rstrip('fits') + 'new')
        print "Running command\n%s\n" % (cmd,) 
        p = Popen(cmd, shell=True)
        #p.communicate()


if __name__ == "__main__":

    parser = OptionParser()
    
    #parser.add_option('-v', '--verbose', action='store_true',
    #        dest='verbose', default=False, 
    #        help='Print extra logging information')

    parser.add_option('-o', '--outputdir', action='store',
            dest='outputdir', default='.', metavar='dir', 
            help='Destination to store solved files')

    options, args = parser.parse_args()

    if len(args) != 1:
            print >> sys.stderr, "Source directory argument required"
            exit(1)


    main((options, args))




#if __name__ == "__main__":
#    #set up command line options
#    parser = OptionParser(usage = "usage: %prog [options] "\
#            + "-l time_low -h time_high <dir>",
#            version = "%prog 0.1",
#            conflict_handler="resolve")
#
#    parser.add_option('-l', '--low', action="store", type="string", 
#            dest="time_low", help="Lower time limit",
#            metavar="time_low")
#
#    parser.add_option('-h', '--high', action="store", type="string", 
#            dest="time_high", help="Higher time limit",
#            metavar="time_high")
#
#    parser.add_option('-d', '--dir', action='store', type='string',
#            dest='dir', help='Directory to store files', default='',
#            metavar='dir')
#
#    parser.add_option('-n', '--no-cpy', action='store_true', dest='no_cpy',
#            default=False, help='Dry run: do not actually copy files')
#
#    parser.add_option('-v', '--verbose', action='store_true',
#            dest='verbose', default=False, 
#            help='Print extra logging information')
#
#
#    options, args = parser.parse_args()
#
#    #compulsary arguments
#    parser.check_required("-l")
#    parser.check_required("-h")
#
#    if len(args) != 1:
#        #print >> sys.stderr, "Source directory argument required"
#        print("Source directory argument required", file=sys.stderr)
#        exit(1)
#
#
#    main((options, args))
